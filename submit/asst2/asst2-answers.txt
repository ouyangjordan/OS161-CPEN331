1. What happens to a thread when it exits (i.e., calls thread_exit())? What about when it sleeps?

In thread exit the thread that calls it is exited. It first detaches
from the process, checks the stack guard brand, and turns the interrupts off the processor

When it sleeps it yields the cpu to another process and goes to sleep.
Calling wakeup on the channel will make it runnable again.

2. What function(s) handle(s) a context switch?

Thread_switch(), and inside of it switchframe_switch().


3. What does it mean for a thread to be in each of the possible thread states?

It means that it has gone through its lifestyle.

4. What does it mean to turn interrupts off?
How is this accomplished? Why is it important to turn off interrupts in the thread subsystem code?

It means to turn off interruptions to the thread or messages to the thread.

It is accomplished by calling splhigh().

It is important to turn of interrupts so that errors and
crashing the os will potentially not occur.

5.What happens when a thread wakes up another thread? How does a sleeping thread get to run again?

What happens is that the other thread wakes up because we call
thread_make_runnable(); It first locks the run queue of the
target thread cpu. The thread make sure it has the lock
and then puts the other thread on the run queue.


The sleeping thread gets to run again by having
thread_make_runnable called on it by another thread.

With

/* Target thread is now ready to run; put it on the run queue. */
target->t_state = S_READY;

6. What function(s) choose(s) the next thread to run?

Because of mesa semantics ordering is not persisted.

It grabs all the threads in a list and then this line
is called making all the threads run able.

/*
 * We could conceivably sort by cpu first to cause fewer lock
 * ops and fewer IPIs, but for now at least don't bother. Just
 * make each thread runnable.
 */
while ((target = threadlist_remhead(&list)) != NULL) {
  thread_make_runnable(target, false);
}

This line of code in the function wchan_wakeall
picks the threads and the list orderings

/*
 * Grab all the threads from the channel, moving them to a
 * private list.
 */
while ((target = threadlist_remhead(&wc->wc_threads)) != NULL) {
  threadlist_addtail(&list, target);
}

7.

By grabbing whatever target comes up first in
while ((target = threadlist_remhead(&wc->wc_threads)) != NULL) {

8. What role does the hardware timer play in scheduling?
What hardware independent function is called on a timer interrupt?

The hardware timer fires an interrupt so that the interrupt handler
will execute instructions to make the cpu start executing another process
on another thread.

void schedule() is called from the timer interrupt.

9.Describe how wchan_sleep() and wchan_wakeone() are used to implement semaphores.

wchan_sleep() is used to implement semaphores by sleeping the
thread when a P() is called on a thread if the count is at 0, to ensure
we don't remove a thread when there are none.

Wchan_wakeone() is called when the count is needed to increase to add
a thread.

10.How does the implementation of wchan ensure that a thread never misses a wakeup signal:
that another thread cannot attempt to awaken the first thread just as
it is preparing to sleep, but before it is actually placed into the sleep queue?

The implementation fo wchan ensures that another thread never misses a
wake up signal because it blocks all interrupts before being put in the sleep queue.
